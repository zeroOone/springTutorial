<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">



    <!--启用注解-->
    <context:annotation-config/>
    <!--定义bean-->
    <!--该bean对age启用了require注释，因此必须在这里注入age，否则报错-->
    <bean id="requireAnnotation" class="spring.AnnotationRequired.Student">
        <property name="name" value="jane"/>
        <property name="age"  value="11"/>
    </bean>

    <!--当autowired注释用在setter上时，相当于使用byType的方式来进行注入-->
    <bean id="autowiredAnnotation" class="spring.AnnotationAutowired.TextEditor">
    </bean>
    <bean id="SpellChecker" class="spring.AnnotationAutowired.SpellChecker"/>

    <!-- 在setter上使用了Autowired后，取消下面的注释，会让spring变糊涂，因为SpellChecker和testByType是两个一样的bean，
        这时候spring它不知道该注入谁了-->
<!--
    <bean id="testByType" class="spring.AnnotationAutowired.SpellChecker"/>
-->

    <!--@Qualifier注解-->
    <bean id="profile" class="spring.AnnotationQualifier.Profile">

    </bean>
    <!--定义多个studentbean，再通过qualifier注解指定依赖的bean-->
    <bean id="student1" class="spring.AnnotationQualifier.Student">
        <property name="age" value="10"/>
        <property name="name" value="student1"/>
    </bean>
    <bean id="student2" class="spring.AnnotationQualifier.Student">
        <property name="age" value="11"/>
        <property name="name" value="student2"/>
    </bean>
    <bean id="student3" class="spring.AnnotationQualifier.Student">
        <property name="age" value="12"/>
        <property name="name" value="student3"/>
    </bean>

    <!--spring内置事件-->
    <bean id="helloEvent" class="spring.SpringEvent.HelloWorld">
        <property name="message" value="hello EVENT"/>
    </bean>
    <bean id="ContextStartedEvent" class="spring.SpringEvent.CStartEventHandler"/>
    <bean id="ContextStopppedEvent" class="spring.SpringEvent.CStopEventHandler"/>

    <!--spring自定义事件-->
    <bean id="myCustomEventHandler" class="spring.CustomizeEvent.MyCustomEventHandler"/>
    <bean id="myCustomEventPublisher" class="spring.CustomizeEvent.MyCustomEventPublisher"/>

</beans>
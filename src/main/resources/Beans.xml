<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--相当于new一个对象，并初始化message为“Hello Spring”-->
    <bean id="HelloWorld" class="spring.firstSpring.HelloSpring">
        <property name="message2" value="Hello SonParent"/>
        <property name="message" value="asasdas"/>
    </bean>

    <!-- Bean作用域 ： 单例模式 -->
    <bean id="singletonScope" class="spring.firstSpring.HelloSpring" scope="singleton">
        <property name="message" value="I'm singleton scope."/>
    </bean>

    <!-- Bean作用域 ： 原型模式 -->
    <bean id="prototypeScope" class="spring.firstSpring.HelloSpring" scope="prototype">
        <property name="message" value="I'm prototype scope."/>
    </bean>

    <!--生命周期-使用接口中的方法(默认)-->
    <bean id="lifeCircleDefault" class="spring.firstSpring.HelloSpring">
        <property name="message" value="Using the default init-method"/>
    </bean>
    <!--生命周期-使用接口中的方法（显示）-->
    <bean id="lifeCircleCreated" class="spring.firstSpring.HelloSpring" destroy-method="destroyBean" init-method="initializeBean">
        <property name="message" value="Using the default destroy-method"/>
    </bean>

    <!--后置处理器 BeanPostProcessor-->
    <bean class="spring.IoC.PostProcessor"/>

    <!--Bean定义继承 : HelloWorld BEAN 为 son的父亲-->
    <bean id="son" class="spring.IoC.HelloSon" parent="HelloWorld">
        <property name="message2" value="Hello CHina"/>
        <property name="message3" value="Namaster cccc"/>
    </bean>

    <!--Bean定义一个模板-->
    <bean id="beanTemplate" abstract="true">
        <property name="message6" value="1"/>
        <property name="message7" value="7"/>
    </bean>
    <!--继承模板-->
    <bean id="templateSon" class="spring.IoC.BeanTemplate" parent="beanTemplate">
        <property name="message" value="0"/>
        <property name="message1" value="1"/>
    </bean>

    <!-- 构造函数注入 -->
    <!--定义TextEditor的bean，并添加构造函数属性-->
    <bean id="textEditor" class="spring.DependencyInjection.TextEditor">
        <constructor-arg ref="spellChecker"/>
    </bean>
    <!--定义SpellChecker的bean-->
    <bean id="spellChecker" class="spring.DependencyInjection.SpellChecker">
    </bean>

    <!-- 基于设值函数注入(setter) -->
    <bean id="textEditor2" class="spring.DependencyInjection.TextEditor2">
        <property name="spellChecker2" ref="spellChecker2"/>
    </bean>
    <bean id="spellChecker2" class="spring.DependencyInjection.SpellChecker2">
    </bean>

    <!-- 基于设值函数注入（setter）除了上述方法，还可以直接注入内部bean来实现 -->
    <bean id="injectInnerBean" class="spring.DependencyInjection.TextEditor2">
        <property name="spellChecker2">
            <bean id="innerBean" class="spring.DependencyInjection.SpellChecker2"/>
        </property>
    </bean>

    <!--注入集合-->
    <bean id="javaCollection" class="spring.DependencyInjection.JavaCollection">
        <property name="addressList">
            <list>
                <value>CHINA</value>
                <value>US</value>
                <value>UA</value>
                <value>JAPAN</value>
            </list>
        </property>
        <property name="addressSet">
            <set>
                <value>CHINA</value>
                <value>US</value>
                <value>UA</value>
                <value>JAPAN</value>
            </set>
        </property>
        <property name="addressMap">
            <map>
                <entry key="one" value="CHINA"/>
                <entry key="two" value="US"/>
                <entry key="Three" value="UA"/>
                <entry key="Four" value="JAPAN"/>
            </map>
        </property>
        <property name="addressProp">
            <props>
                <prop key="one">CHINA</prop>
                <prop key="two">US</prop>
                <prop key="three">UA</prop>
                <prop key="four">JAPAN</prop>
            </props>
        </property>
        <!--引用注入-->
    </bean>
</beans>